#!/usr/bin/env perl
use strict;
use warnings;

use lib "lib/";
use Game::Fallout::Hack;

print "Enter words, white space delimited.\n";
print "If necessary, enter a single '.' (period) after the final word.\n";

my @orig_words;

while ( my $line = <STDIN> ) {
    chomp $line;
    next unless $line;
    push @orig_words, split /\s+/, $line;
    if ( $orig_words[-1] eq "." ) {
        pop @orig_words;
        last;
    }
    last if scalar @orig_words >= 11;
}

my $length = length $orig_words[0];
for my $word ( @orig_words ) {
    unless ( length $word == $length ) {
        die "ERROR: not all words are the same length, e.g. '$orig_words[0]' vs '$word'"
    }
}

my @words = ( @orig_words );
my $guesses;
my $answer;

GUESS:
for my $guess ( 1, 2, 3, 4 ) {

    $guesses = $guess;

    my $recommended = Game::Fallout::Hack::recommend( $guess, @words );

    print "\nRecommended: $recommended\n";

    my $num_letters;
  RESULTS:
    while ( 1 ) {
        my $stdin = <STDIN>;
        if ( $stdin =~ m|(\d+)| ) {
            $num_letters = $1;
            last RESULTS;
        }
        elsif ( $stdin =~ m|\!| ) {
            $answer = $recommended;
            last GUESS;
        }
        warn "ERROR: enter the number of characters matched by $recommended\n";
    }

    @words = Game::Fallout::Hack::guess( \@words, $recommended, $num_letters );
    my $num_words = scalar @words;

    if ( $num_words == 1 ) {
        $answer = $words[0];
        $guesses++;
        print "ANSWER: $answer\n";
        last GUESS;
    }

    print "$num_words remaining: ", join( " ", @words ), "\n";
}

print "\n\nMatched in $guesses guesses\n";
print "$answer: ", join( " ", @orig_words ), "\n";
